<?xml version="1.0"?>
<configuration>
  <configSections>
    <section name="systemSettings" type="System.Configuration.NameValueSectionHandler"/>
    <sectionGroup name="spring">
      <section name="context" type="Spring.Context.Support.ContextHandler, Spring.Core"/>
      <section name="objects" type="Spring.Context.Support.DefaultSectionHandler, Spring.Core"/>
      <section name="parsers" type="Spring.Context.Support.NamespaceParsersSectionHandler, Spring.Core"/>
    </sectionGroup>
    <section name="loggingConfiguration" type="Microsoft.Practices.EnterpriseLibrary.Logging.Configuration.LoggingSettings, Microsoft.Practices.EnterpriseLibrary.Logging"/>
    <section name="exceptionHandling" type="Microsoft.Practices.EnterpriseLibrary.ExceptionHandling.Configuration.ExceptionHandlingSettings, Microsoft.Practices.EnterpriseLibrary.ExceptionHandling"/>
    <section name="cachingConfiguration" type="Microsoft.Practices.EnterpriseLibrary.Caching.Configuration.CacheManagerSettings,Microsoft.Practices.EnterpriseLibrary.Caching" />
  </configSections>
  <systemSettings>
    <add key="db.dataSource" value="Data Source=localhost;Database=cully;User Id=root;Password=root;"/>
  </systemSettings>
  <!--spring start-->
  <spring>
    <parsers>
      <parser type="Spring.Data.Config.DatabaseNamespaceParser, Spring.Data"/>
    </parsers>
    <context>
      <resource uri="~/config/common.xml"/>
      <resource uri="~/config/scheduling.xml"/>
      <resource uri="~/config/common-domain.xml"/>
      <resource uri="~/config/common-dao.xml"/>
      <resource uri="~/config/common-service.xml"/>
      <resource uri="~/config/common-wcf.xml"/>
      <resource uri="~/config/cully-dao.xml"/>
      <resource uri="~/config/cully-service.xml"/>
      <resource uri="~/config/cully-wcf.xml"/>
    </context>
  </spring>
  <!--spring end-->
  <!--logging start-->
  <loggingConfiguration name="" tracingEnabled="true" defaultCategory="InfoCategory">
    <listeners>
      <add name="ErrorFileTraceListener" type="Microsoft.Practices.EnterpriseLibrary.Logging.TraceListeners.RollingFlatFileTraceListener, Microsoft.Practices.EnterpriseLibrary.Logging, Version=5.0.414.0"
        listenerDataType="Microsoft.Practices.EnterpriseLibrary.Logging.Configuration.RollingFlatFileTraceListenerData, Microsoft.Practices.EnterpriseLibrary.Logging, Version=5.0.414.0"
        fileName="logs\\errors.log" formatter="Exception Formatter"
        rollFileExistsBehavior="Overwrite" rollInterval="None" rollSizeKB="100"
        timeStampPattern="yyyy-MM-dd" traceOutputOptions="None" filter="Error" />
      <add name="InfoFileTraceListener" type="Microsoft.Practices.EnterpriseLibrary.Logging.TraceListeners.RollingFlatFileTraceListener, Microsoft.Practices.EnterpriseLibrary.Logging, Version=5.0.414.0"
        listenerDataType="Microsoft.Practices.EnterpriseLibrary.Logging.Configuration.RollingFlatFileTraceListenerData, Microsoft.Practices.EnterpriseLibrary.Logging, Version=5.0.414.0"
        fileName="logs\\infos.log" formatter="Exception Formatter" rollFileExistsBehavior="Overwrite"
        rollInterval="None" rollSizeKB="100" timeStampPattern="yyyy-MM-dd"
        traceOutputOptions="None" filter="Information" />
    </listeners>
    <formatters>
      <add type="Microsoft.Practices.EnterpriseLibrary.Logging.Formatters.TextFormatter, Microsoft.Practices.EnterpriseLibrary.Logging"
        template="Timestamp: {timestamp}&#xA;Message: {message}" name="Exception Formatter" />
    </formatters>
    <categorySources>
      <add switchValue="Information" name="InfoCategory">
        <listeners>
          <add name="InfoFileTraceListener" />
        </listeners>
      </add>
      <add switchValue="All" name="ErrorCategory">
        <listeners>
          <add name="ErrorFileTraceListener" />
        </listeners>
      </add>
    </categorySources>
    <specialSources>
      <allEvents switchValue="All" name="All Events" />
      <notProcessed switchValue="All" name="Unprocessed Category" />
      <errors switchValue="All" name="Logging Errors &amp; Warnings">
        <listeners>
          <add name="ErrorFileTraceListener" />
        </listeners>
      </errors>
    </specialSources>
  </loggingConfiguration>
  <!--logging end-->
  <!--exception start-->
  <exceptionHandling>
    <exceptionPolicies>
      <add name="Log Only Policy">
        <exceptionTypes>
          <add name="Exception" type="System.Exception, mscorlib" postHandlingAction="None">
            <exceptionHandlers>
              <add name="LogOnlyHandler" type="Microsoft.Practices.EnterpriseLibrary.ExceptionHandling.Logging.LoggingExceptionHandler, Microsoft.Practices.EnterpriseLibrary.ExceptionHandling.Logging"
                logCategory="ErrorCategory" eventId="5" severity="Error" title="Business Layer Exceptions"
                formatterType="Microsoft.Practices.EnterpriseLibrary.ExceptionHandling.TextExceptionFormatter, Microsoft.Practices.EnterpriseLibrary.ExceptionHandling"
                priority="-1" />
            </exceptionHandlers>
          </add>
        </exceptionTypes>
      </add>
      <add name="Wrap Policy">
        <exceptionTypes>
          <add name="Exception" type="System.Exception, mscorlib" postHandlingAction="ThrowNewException">
            <exceptionHandlers>
              <add name="WrapHandler" type="Microsoft.Practices.EnterpriseLibrary.ExceptionHandling.WrapHandler, Microsoft.Practices.EnterpriseLibrary.ExceptionHandling"
                exceptionMessage="Business  Layer Errors" exceptionMessageResourceType=""
                wrapExceptionType="ThinkInBio.Common.Exceptions.BusinessLayerException,ThinkInBio.Common" />
            </exceptionHandlers>
          </add>
        </exceptionTypes>
      </add>
    </exceptionPolicies>
  </exceptionHandling>
  <!--exception end-->
  <!--caching end-->
  <cachingConfiguration defaultCacheManager="ShortInMemoryPersistence">
    <backingStores>
      <add name="inMemory"
				type="Microsoft.Practices.EnterpriseLibrary.Caching.BackingStoreImplementations.NullBackingStore, Microsoft.Practices.EnterpriseLibrary.Caching" />
    </backingStores>
    <cacheManagers>
      <add name="ShortInMemoryPersistence" type="Microsoft.Practices.EnterpriseLibrary.Caching.CacheManager, Microsoft.Practices.EnterpriseLibrary.Caching"
				expirationPollFrequencyInSeconds="30"
				maximumElementsInCacheBeforeScavenging="1000"
				numberToRemoveWhenScavenging="10"
				backingStoreName="inMemory" />
    </cacheManagers>
  </cachingConfiguration>
  <!--caching end-->
  <runtime>
    <assemblyBinding xmlns="urn:schemas-microsoft-com:asm.v1">
      <dependentAssembly>
        <assemblyIdentity name="Common.Logging" culture="neutral" publicKeyToken="af08829b84f0328e"/>
        <bindingRedirect oldVersion="2.1.1.0" newVersion="2.1.2.0"/>
      </dependentAssembly>
    </assemblyBinding>
  </runtime>
  <system.web>
    <compilation debug="true" targetFramework="4.0"/>
  </system.web>
  <system.serviceModel>
    <services>
      <service name="DemoWcfService">
        <endpoint address="" binding="webHttpBinding" contract="ThinkInBio.CommonApp.WSL.IDemoWcfService" behaviorConfiguration="RESTBehavior"/>
      </service>
      <service name="SignWcfService">
        <endpoint address="" binding="webHttpBinding" contract="ThinkInBio.CommonApp.WSL.ISignWcfService" behaviorConfiguration="RESTBehavior"/>
      </service>
      <service name="UserWcfService">
        <endpoint address="" binding="webHttpBinding" contract="ThinkInBio.CommonApp.WSL.IUserWcfService" behaviorConfiguration="RESTBehavior"/>
      </service>
      <service name="CategoryWcfService">
        <endpoint address="" binding="webHttpBinding" contract="ThinkInBio.CommonApp.WSL.ICategoryWcfService" behaviorConfiguration="RESTBehavior"/>
      </service>
      <service name="NoticeWcfService">
        <endpoint address="" binding="webHttpBinding" contract="ThinkInBio.CommonApp.WSL.INoticeWcfService" behaviorConfiguration="RESTBehavior"/>
      </service>
      <service name="IdiomWcfService">
        <endpoint address="" binding="webHttpBinding" contract="ThinkInBio.CommonApp.WSL.IIdiomWcfService" behaviorConfiguration="RESTBehavior"/>
      </service>
      <service name="ScheduleWcfService">
        <endpoint address="" binding="webHttpBinding" contract="ThinkInBio.CommonApp.WSL.IScheduleWcfService" behaviorConfiguration="RESTBehavior"/>
      </service>
      <service name="BizNotificationWcfService">
        <endpoint address="" binding="webHttpBinding" contract="ThinkInBio.CommonApp.WSL.IBizNotificationWcfService" behaviorConfiguration="RESTBehavior"/>
      </service>
      <service name="ProjectWcfService">
        <endpoint address="" binding="webHttpBinding" contract="ThinkInBio.Cully.WSL.IProjectWcfService" behaviorConfiguration="RESTBehavior"/>
      </service>
      <service name="TaskWcfService">
        <endpoint address="" binding="webHttpBinding" contract="ThinkInBio.Cully.WSL.ITaskWcfService" behaviorConfiguration="RESTBehavior"/>
      </service>
      <service name="LogWcfService">
        <endpoint address="" binding="webHttpBinding" contract="ThinkInBio.Cully.WSL.ILogWcfService" behaviorConfiguration="RESTBehavior"/>
      </service>
      <service name="CommentWcfService">
        <endpoint address="" binding="webHttpBinding" contract="ThinkInBio.Cully.WSL.ICommentWcfService" behaviorConfiguration="RESTBehavior"/>
      </service>
      <service name="CalendarWcfService">
        <endpoint address="" binding="webHttpBinding" contract="ThinkInBio.Cully.WSL.ICalendarWcfService" behaviorConfiguration="RESTBehavior"/>
      </service>
    </services>
    <bindings>
      <webHttpBinding>
        <binding name="secure">
          <security mode="Transport">
            <transport clientCredentialType="Basic"/>
          </security>
        </binding>
      </webHttpBinding>
    </bindings>
    <behaviors>
      <endpointBehaviors>
        <behavior name="RESTBehavior">
          <webHttp/>
        </behavior>
      </endpointBehaviors>
    </behaviors>
    <serviceHostingEnvironment multipleSiteBindingsEnabled="true"/>
  </system.serviceModel>
</configuration>